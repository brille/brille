name: Build and Publish source and wheels

on:
  push:
  pull_request:

jobs:
  cmake-ctest:
    if: ${{ contains(github.event_name, 'push') }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ macos-10.15, ubuntu-20.04, windows-2019 ]
        python-version: [ '3.10' ]
        cmake-type: [ Release ]
    steps:
      - uses: brille/python-cmake-ctest-action@v1
        with:
          os: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}
          cmake-type: ${{ matrix.cmake-type }}

  cibuildwheel:
    if: github.event_name == 'pull_request' || startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [ manylinux, musllinux ]
        python-version: [cp36, cp37, cp38, cp39, cp310]
    steps:
      - uses: brille/python-hdf5-cibuildwheel-action@v1
        with:
          platform: ${{ matrix.platform }}
          python-version: ${{ matrix.python-version }}
          arch: auto64

  buildwheel:
    if: github.event_name == 'pull_request' || startsWith(github.ref, 'refs/tags')
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-2019, macos-10.15 ]
        python-version: [ '3.6', '3.7', '3.8', '3.9', '3.10' ]
    steps:
      - uses: brille/python-hdf5-buildwheel-action@v1
        with:
          os: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}
          arch: auto64

  source:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    steps:
      - uses: actions/checkout@v2
      -
        name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          architecture: x64
      -
        name: Update Python dependencies
        run: python -m pip install --upgrade pip setuptools setuptools_scm
        shell: bash
      -
        name: Build source tarball
        run: python setup.py sdist
        shell: bash
      -
        name: Attach tarball to action
        uses: actions/upload-artifact@v2
        with:
          name: source
          path: dist/*.tar.gz

  collect-artifacts:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: [source, cibuildwheel, buildwheel]
    steps:
      - uses: actions/download-artifact@v2
        id: download
        with:
          path: artifacts
      -
        name: Move artifacts into a single folder
        run : |
          mkdir dist
          find ${{ steps.download.outputs.download-path }} -type f -regex ".*\.\(tar\.gz\|whl\)" -exec mv {} dist/. \;
      -
        name: Attach artifacts to GitHub tagged release
        uses: ncipollo/release-action@v1
        with:
          draft: true
          prerelease: true
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: "dist/*.whl,dist/*.tar.gz"
      -
        name: Publish artifacts to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: ${{ secrets.PYPI_USERNAME }}
          password: ${{ secrets.PYPI_PASSWORD }}

  sphinx:
    runs-on: ubuntu-latest
    needs: [ cibuildwheel ]
    steps:
    - name: Checkout brille repository
      uses: actions/checkout@v2
      with:
        path: repository
    -
      name: Checkout brille.github.io repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        repository: brille/brille.github.io
        token: ${{ secrets.BRILLE_GITHUB_IO_TOKEN }}
        path: io
    -
      name: Download 'musllinux' wheel
      uses: actions/download-artifact@v2
      id: path
      with:
        name: cp39-musllinux_auto64
        path: wheelhouse
    -
      name: Get downloaded wheel name
      id: wheel
      run: echo "::set-output name=wheel::wheelhouse/$(ls)"
      working-directory: wheelhouse
    -
      run: echo "${{ steps.wheel.outputs.wheel }}"
    -
      name: Sphinx Docker build
      uses: g5t/sphinxer@v2.1.0
      with:
        source_dir: repository
        pages_dir: io
        is_release: ${{ contains(github.event_name, 'release') }}
        create_readme: true
        wheel: "${{ steps.wheel.outputs.wheel }}"
        html_dir: ${{ github.head_ref }}
