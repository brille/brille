name: Build and Publish source and wheels

on:
  push:
  pull_request:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ macos-10.15, ubuntu-20.04, windows-2019 ]
        python-version: [ '3.6', '3.7', '3.8', '3.9', '3.10' ]
        build_type: [Release]
    steps:
      - uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: ${{ matrix.python-version }}
          activate-environment: anaconda-client-env
          channels: conda-forge,defaults
          mamba-version: "*"
      - shell: bash -l {0}
        run: mamba install hdf5 numpy cmake
      - if: startsWith(matrix.os, 'ubuntu')
        shell: bash -l {0}
        run: mamba install gcc gxx
      - if: startsWith(matrix.os, 'macos')
        shell: bash -l {0}
        run: mamba install llvm-openmp==11.1.0
      - shell: bash -l {0}
        run: echo "pythonInterpreter=`which python`" >> $GITHUB_ENV
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: configure
        shell: bash -l {0}
        run: cmake -S . -B build -D CMAKE_BUILD_TYPE=${{ matrix.build_type }} -D PYTHON3_EXECUTABLE=${{ env.pythonInterpreter }}
      - name: Get number of CPU cores
        uses: SimenB/github-actions-cpu-cores@v1
        id: cpu-cores
      - name: build
        shell: bash -l {0}
        run: cmake --build build --config ${{ matrix.build_type }} --parallel ${{ steps.cpu-cores.outputs.count }}
      - name: test
        shell: bash -l {0}
        run: |
          cd build
          ctest -C ${{ matrix.build_type }} --output-on-failure

  windows:
    runs-on: windows-2019
    needs: [test]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    strategy:
      fail-fast: true
      matrix:
        architecture: [x64]
        python-version: [ '3.6', '3.7', '3.8', '3.9', '3.10' ]
    steps:
      - uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: ${{ matrix.python-version }}
          activate-environment: anaconda-client-env
          channels: conda-forge,defaults
          mamba-version: "*"
      - shell: bash -l {0}
        run: mamba install hdf5 numpy cmake
#      - uses: g5t/manywin-action@v0
#        with:
#          name: "windows-${{matrix.architecture}}-py${{matrix.python-version}}"
      - name: Update python tools
        shell: bash -l {0}
        run: python -m pip install --upgrade pip setuptools setuptools_scm wheel delvewheel
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Build and fix the wheel
        shell: bash -l {0}
        run: |
          python -m pip wheel --no-deps -w wheelhouse .
          delvewheel repair -w dist -v wheelhouse/*.whl
      - uses: actions/upload-artifact@v2
        with:
          name: "windows-${{matrix.architecture}}-py${{matrix.python-version}}"
          path: dist/*.whl

  macos:
    runs-on: macos-10.15
    needs: [test]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    strategy:
      fail-fast: true
      matrix:
        architecture: [x64]
        python-version: [ '3.6', '3.7', '3.8', '3.9', '3.10' ]
    steps:
      - uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: ${{ matrix.python-version }}
          activate-environment: anaconda-client-env
          channels: conda-forge,defaults
          mamba-version: "*"
      - shell: bash -l {0}
        run: mamba install llvm-openmp==11.1.0 hdf5 numpy cmake
      - name: Install rename from brew
        shell: bash -l {0}
        run: brew install rename
      - name: Update python tools
        shell: bash -l {0}
        run: python -m pip install --upgrade pip setuptools setuptools_scm wheel delocate
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Build and fix the wheel
        shell: bash -l {0}
        run: |
          python -m pip wheel --no-deps -w wheelhouse .
          delocate-wheel -w dist -v wheelhouse/*.whl
          rename -e 's/10_15/10_13/' dist/*.whl
      - uses: actions/upload-artifact@v2
        with:
          name: "macos-${{matrix.architecture}}-py${{matrix.python-version}}"
          path: dist/*.whl

  manylinux:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')

    strategy:
      fail-fast: true
      matrix:
        architecture: [x64]
        python-version: ['cp36-cp36m', 'cp37-cp37m', 'cp38-cp38', 'cp39-cp39', 'cp310-cp310']

    steps:
      - uses: actions/checkout@v2

      - name: Build manylinux python ${{ matrix.python-version }} wheel
        uses: RalfG/python-wheels-manylinux-build@v0.4.2-manylinux2014_x86_64
        with:
          python-versions: ${{ matrix.python-version }}
          build-requirements: ''
          system-packages: 'devtoolset-11-gcc-c++ hdf5-devel'
          pre-build-command: 'source scl_source enable devtoolset-11'
          package-path: ''
          pip-wheel-args: '-w ./dist --no-deps'

      - name: Attach wheel to action
        uses: actions/upload-artifact@v2
        with:
          name: manylinux-${{matrix.architecture}}-${{ matrix.python-version }}
          path: dist/*manylinux*.whl

  source:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')

    steps:
      - uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          architecture: x64

      - name: Update Python dependencies
        run: python -m pip install --upgrade pip setuptools
        shell: bash

      - name: Build source tarball
        run: python setup.py sdist
        shell: bash

      - name: Attach tarball to action
        uses: actions/upload-artifact@v2
        with:
          name: source
          path: dist/*.tar.gz

  collect-artifacts:
    runs-on: ubuntu-latest
    needs: [source, manylinux, windows, macos]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')

    steps:
      - uses: actions/download-artifact@v2
        id: download
        with:
          path: artifacts

      - name: Move artifacts into a single folder
        run : |
          mkdir dist
          find ${{ steps.download.outputs.download-path }} -type f -regex ".*\.\(tar\.gz\|whl\)" -exec mv {} dist/. \;

      - name: Attach artifacts to GitHub tagged release
        uses: ncipollo/release-action@v1
        with:
          draft: true
          prerelease: true
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: "dist/*.whl,dist/*.tar.gz"

      - name: Publish artifacts to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: ${{ secrets.PYPI_USERNAME }}
          password: ${{ secrets.PYPI_PASSWORD }}