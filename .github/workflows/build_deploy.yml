name: Build and Publish source and wheels

on:
  push:
  pull_request:

jobs:
  # test:
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       os: [ macos-10.15, ubuntu-20.04, windows-2019 ]
  #       python-version: [ '3.10' ]
  #       build_type: [Release]
  #   steps:
  #     - uses: conda-incubator/setup-miniconda@v2
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #         activate-environment: env
  #         channels: conda-forge,defaults
  #         mamba-version: "*"
  #     - shell: bash -l {0}
  #       run: mamba install hdf5 numpy cmake
  #     - if: startsWith(matrix.os, 'ubuntu')
  #       shell: bash -l {0}
  #       run: mamba install gcc gxx
  #     - if: startsWith(matrix.os, 'macos')
  #       shell: bash -l {0}
  #       run: mamba install llvm-openmp==11.1.0
  #     - name: Update python tools
  #       shell: bash -l {0}
  #       run: python -m pip install --upgrade pip setuptools setuptools_scm
  #     - shell: bash -l {0}
  #       run: echo "pythonInterpreter=`which python`" >> $GITHUB_ENV
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0
  #     - name: configure
  #       shell: bash -l {0}
  #       run: cmake -S . -B build -D CMAKE_BUILD_TYPE=${{ matrix.build_type }} -D PYTHON3_EXECUTABLE=${{ env.pythonInterpreter }}
  #     - name: Get number of CPU cores
  #       uses: SimenB/github-actions-cpu-cores@v1
  #       id: cpu-cores
  #     - name: build
  #       shell: bash -l {0}
  #       run: cmake --build build --config ${{ matrix.build_type }} --parallel ${{ steps.cpu-cores.outputs.count }}
  #     - name: test
  #       shell: bash -l {0}
  #       run: |
  #         cd build
  #         ctest -C ${{ matrix.build_type }} --output-on-failure --parallel ${{ steps.cpu-cores.outputs.count }}
  #
  # gnu_linux:
  #   needs: [test]
  #   name: ${{ matrix.ver }} GNU libc wheel
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ ubuntu-20.04 ]
  #       architecture: [ x64 ]
  #       ver: [cp36, cp37, cp38, cp39, cp310]
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0
  #     - name: Build wheels
  #       uses: pypa/cibuildwheel@v2.6.1
  #       env:
  #         CIBW_BUILD: ${{matrix.ver}}-*
  #         CIBW_SKIP: >-
  #           *-musllinux_*
  #         CIBW_ARCHS: auto64
  #         CIBW_BEFORE_ALL_LINUX: yum install -y hdf5-devel
  #         CIBW_BEFORE_TEST: python -m pip install numpy
  #         CIBW_TEST_COMMAND: python -m unittest discover -s {project}/wrap/tests
  #     - uses: actions/upload-artifact@v2
  #       with:
  #         name: "gnulibc-${{matrix.architecture}}-${{matrix.ver}}"
  #         path: ./wheelhouse/*.whl

  musl_linux:
    # needs: [test]
    name: ${{ matrix.ver }} musl libc wheel
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-20.04 ]
        architecture: [ x64 ]
        # ver: [cp36, cp37, cp38, cp39, cp310]
        ver: [cp39]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.6.1
        env:
          CIBW_BUILD: ${{matrix.ver}}-*
          CIBW_SKIP: >-
            *-manylinux_*
          CIBW_ARCHS: auto64
          CIBW_BEFORE_ALL_LINUX: apk update; apk add hdf5-dev
          CIBW_BEFORE_TEST: python -m pip install numpy
          CIBW_TEST_COMMAND: python -m unittest discover -s {project}/wrap/tests
      - uses: actions/upload-artifact@v2
        with:
          name: "musllibc-${{matrix.architecture}}-${{matrix.ver}}"
          path: ./wheelhouse/*.whl

  # windows:
  #   needs: [ test ]
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [ windows-2019 ]
  #       architecture: [ x64 ]
  #       python-version: [ '3.6', '3.7', '3.8', '3.9', '3.10' ]
  #   steps:
  #     - uses: conda-incubator/setup-miniconda@v2
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #         activate-environment: env
  #         channels: conda-forge,defaults
  #         mamba-version: "*"
  #     - shell: bash -l {0}
  #       run: mamba install hdf5 numpy cmake
  #     - name: Update python tools
  #       shell: bash -l {0}
  #       run: python -m pip install --upgrade pip setuptools setuptools_scm wheel delvewheel
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0
  #     - name: Build and fix the wheel
  #       shell: bash -l {0}
  #       run: |
  #         python -m pip wheel --no-deps -w wheelhouse .
  #         delvewheel repair -w dist -v wheelhouse/*.whl
  #     - name: Install the wheel
  #       shell: bash -l {0}
  #       run: python -m pip install dist/*.whl
  #     - name: Test installed wheel
  #       shell: bash -l {0}
  #       run: cd wrap/tests; python -m unittest
  #     - uses: actions/upload-artifact@v2
  #       with:
  #         name: "windows-${{matrix.architecture}}-py${{matrix.python-version}}"
  #         path: dist/*.whl
  #
  # macos:
  #   needs: [ test ]
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [ macos-10.15 ]
  #       architecture: [ x64 ]
  #       python-version: [ '3.6', '3.7', '3.8', '3.9', '3.10' ]
  #   steps:
  #     - uses: conda-incubator/setup-miniconda@v2
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #         activate-environment: env
  #         channels: conda-forge,defaults
  #         mamba-version: "*"
  #     - shell: bash -l {0}
  #       run: mamba install llvm-openmp==11.1.0 numpy
  #     - name: Install rename and hdf5 from brew
  #       shell: bash -l {0}
  #       run: brew install rename hdf5
  #     - name: Update python tools
  #       shell: bash -l {0}
  #       run: python -m pip install --upgrade pip setuptools setuptools_scm wheel delocate
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0
  #     - name: Build the wheel
  #       shell: bash -l {0}
  #       run: python -m pip wheel --no-deps -w wheelhouse .
  #     - name: Repair the wheel
  #       shell: bash -l {0}
  #       run: DYLD_LIBRARY_PATH=/usr/local/miniconda/envs/env/lib delocate-wheel -w dist -v wheelhouse/*.whl
  #     - name: Rename the wheel
  #       shell: bash
  #       run: rename -e 's/10_15/10_13/' dist/*.whl
  #     - name: Install the wheel
  #       shell: bash -l {0}
  #       run: python -m pip install dist/*.whl
  #     - name: Test installed wheel
  #       shell: bash -l {0}
  #       run: cd wrap/tests; python -m unittest
  #     - uses: actions/upload-artifact@v2
  #       with:
  #         name: "macos-${{matrix.architecture}}-py${{matrix.python-version}}"
  #         path: dist/*.whl
  #
  # source:
  #   runs-on: ubuntu-latest
  #   needs: [test]
  #   if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
  #
  #   steps:
  #     - uses: actions/checkout@v2
  #
  #     - name: Setup Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: 3.8
  #         architecture: x64
  #
  #     - name: Update Python dependencies
  #       run: python -m pip install --upgrade pip setuptools
  #       shell: bash
  #
  #     - name: Build source tarball
  #       run: python setup.py sdist
  #       shell: bash
  #
  #     - name: Attach tarball to action
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: source
  #         path: dist/*.tar.gz
  #
  # collect-artifacts:
  #   runs-on: ubuntu-latest
  #   needs: [source, gnu_linux, musl_linux, windows, macos]
  #   if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
  #
  #   steps:
  #     - uses: actions/download-artifact@v2
  #       id: download
  #       with:
  #         path: artifacts
  #
  #     - name: Move artifacts into a single folder
  #       run : |
  #         mkdir dist
  #         find ${{ steps.download.outputs.download-path }} -type f -regex ".*\.\(tar\.gz\|whl\)" -exec mv {} dist/. \;
  #
  #     - name: Attach artifacts to GitHub tagged release
  #       uses: ncipollo/release-action@v1
  #       with:
  #         draft: true
  #         prerelease: true
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         artifacts: "dist/*.whl,dist/*.tar.gz"
  #
  #     - name: Publish artifacts to PyPI
  #       uses: pypa/gh-action-pypi-publish@release/v1
  #       with:
  #         user: ${{ secrets.PYPI_USERNAME }}
  #         password: ${{ secrets.PYPI_PASSWORD }}

  sphinx:
    runs-on: ubuntu-latest
    needs: [ musl_linux ]
    steps:
    -
      name: Checkout brille repository
      uses: actions/checkout@v2
      with:
        path: repository
    -
      name: Checkout brille.github.io repository
      uses: actions/checkout@v2
      with:
        repository: brille/brille.github.io
        token: ${{ secrets.BRILLE_GITHUB_IO_TOKEN }}
        path: io
    -
      name: Download 'musllinux' wheel
      uses: actions/download-artifact@v2
      id: path
      with:
        name: musllibc-x64-cp39
        path: wheelhouse
    -
      name: Get downloaded wheel name
      id: wheel
      run: echo "::set-output name=wheel::$(ls -R)"
      working-directory: wheelhouse
    -
      run: echo "${{ steps.wheel.outputs.wheel }}"
    -
      name: Sphinx Docker build
      uses: ./repository/.github/actions/sphinxer
      with:
        source_dir: repository
        pages_dir: io
        is_release: ${{ contains(github.event_name, 'release') }}
        create_readme: true
        wheel: "${{ steps.path.outputs.download-path }}/${{ steps.wheel.outputs.wheel }}"
