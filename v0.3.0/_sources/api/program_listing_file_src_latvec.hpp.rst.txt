
.. _program_listing_file_src_latvec.hpp:

Program Listing for File latvec.hpp
===================================

|exhale_lsh| :ref:`Return to documentation for file <file_src_latvec.hpp>` (``src\latvec.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /* Copyright 2019 Greg Tucker
   //
   // This file is part of brille.
   //
   // brille is free software: you can redistribute it and/or modify it under the
   // terms of the GNU Affero General Public License as published by the Free
   // Software Foundation, either version 3 of the License, or (at your option)
   // any later version.
   //
   // brille is distributed in the hope that it will be useful, but
   // WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
   // or FITNESS FOR A PARTICULAR PURPOSE.
   // See the GNU Affero General Public License for more details.
   //
   // You should have received a copy of the GNU Affero General Public License
   // along with brille. If not, see <https://www.gnu.org/licenses/>.            */
   
   #ifndef _LATVEC_CLASS_H_
   #define _LATVEC_CLASS_H_
   
   #include <typeinfo> // for std::bad_cast
   #include <exception>
   #include "lattice.hpp"
   #include "arrayvector.hpp"
   
   class LatVec{};
   template<typename T> class LDVec;
   template<typename T> class LQVec;
   
   template<typename T> class LDVec: public LatVec, public ArrayVector<T>{
     Direct lattice;
   public:
     LDVec(const Direct& lat=Direct(), const size_t n=0, const T *d=nullptr): ArrayVector<T>(3,n,d), lattice(lat){}
     template<class Integer, typename=typename std::enable_if<std::is_integral<Integer>::value>::type>
     LDVec(const Direct& lat,
           const T*d,
           const std::vector<Integer>& shape,
           const std::vector<Integer>& strides,
           const int flag=1): ArrayVector<T>(d,shape,strides), lattice(lat){
       this->check_arrayvector(flag);
     }
     LDVec(const Direct& lat, const ArrayVector<T>& vec, const int flag=1): ArrayVector<T>(vec), lattice(lat){ this->check_arrayvector(flag); }
     template<class R> LDVec(const LDVec<R>& vec): ArrayVector<T>(vec.numel(),vec.size(),vec.data()), lattice(vec.get_lattice()) {}
     template<class R> LDVec(const Direct& lat, const std::vector<std::array<R,3>>& va): ArrayVector<T>(va), lattice(lat){}
     // required in gcc 9+ since we define our own operator= below:
     LDVec(const LDVec<T>& other): ArrayVector<T>(3u,other.size(),other.data()), lattice(other.get_lattice()) {}
     LDVec<T>& operator=(const LDVec<T>& other){
       if (this != &other){ // do nothing if called by, e.g., a = a;
         this->lattice = other.get_lattice();
         size_t m = other.numel();
         size_t n = other.size();
         // reuse the data-block if we can. otherwise, refresh/resize it
         if ( m !=this->numel() ) this->refresh(m,n);
         if ( n !=this->size()  ) this->resize(n);
         // copy-over the data (if it exists)
         if (other._data && m && n)
           for(size_t i=0; i<m*n; i++)
             this->_data[i] = other._data[i];
       }
       return *this;
     }
     const LDVec<T> operator[](const size_t i) const{
       bool isok = i < this->size();
       LDVec<T> out(this->lattice, isok ? 1u: 0u);
       if (isok) out = this->get(i);
       return out;
     }
   
     Direct get_lattice() const { return lattice; }
     template<typename R> bool samelattice(const LDVec<R> *vec) const { return lattice.issame(vec->get_lattice()); }
     template<typename R> bool samelattice(const LQVec<R> *)    const { return false; }
     template<typename R> bool starlattice(const LDVec<R> *)    const { return false; }
     template<typename R> bool starlattice(const LQVec<R> *vec) const { return lattice.isstar(vec->get_lattice()); }
     template<typename R> bool samelattice(const LDVec<R> &vec) const { return lattice.issame(vec.get_lattice()); }
     template<typename R> bool samelattice(const LQVec<R> &)    const { return false; }
     template<typename R> bool starlattice(const LDVec<R> &)    const { return false; }
     template<typename R> bool starlattice(const LQVec<R> &vec) const { return lattice.isstar(vec.get_lattice()); }
     // extract overloads preserving lattice information
     LDVec<T> extract(const size_t i=0) const ;
     LDVec<T> first(const size_t num) const;
     LDVec<T> extract(const size_t n, const size_t *i) const;
     LDVec<T> extract(const ArrayVector<size_t>& idx) const;
     LDVec<T> extract(const ArrayVector<bool>& idx) const;
     LDVec<T> extract(const std::vector<bool>& idx) const;
     LDVec<T> get(const size_t i) const;
     ArrayVector<T> get_hkl() const;
     ArrayVector<double> get_xyz() const;
     LQVec<double> star() const;
   
     double dot(const size_t i, const size_t j) const;
     double norm(const size_t i) const { return sqrt(this->dot(i,i)); }
     LDVec<double> cross(const size_t i, const size_t j) const;
   
     LDVec<T>& operator-=(const LDVec<T>& av);
     LDVec<T>& operator+=(const LDVec<T>& av);
   
     LDVec<T>& operator+=(const T& av);
     LDVec<T>& operator-=(const T& av);
     LDVec<T>& operator*=(const T& av);
     LDVec<T>& operator/=(const T& av);
     // LDVec<T> operator -(); // unary subtraction is not actually defined anywhere
   
     template<class R> AVSizeInfo consistency_check(const LDVec<R>& b) const {
       if (!(this->samelattice(b))) throw std::runtime_error("arithmetic between Lattice vectors requires they have the same lattice");
       return this->ArrayVector<T>::consistency_check(b);
     }
     template<class R> AVSizeInfo consistency_check(const LQVec<R>& b) const {
       if (!(this->starlattice(b))) throw std::runtime_error("Real and reciprocal space vectors must be in dual lattices.");
       return this->ArrayVector<T>::consistency_check(b);
     }
     template<class R, template<class> class A,
       typename=typename std::enable_if<!std::is_base_of<LatVec,A<R>>::value && std::is_base_of<ArrayVector<R>,A<R>>::value >::type
       >
     AVSizeInfo consistency_check(const A<R>& b) const {
       return this->ArrayVector<T>::consistency_check(b); // b has no lattice, so nothing to check
     }
     template<typename R> bool isapprox(const LDVec<R>& that){ return (this->samelattice(that) && this->ArrayVector<T>::isapprox(that)); }
     bool isapprox(const size_t i, const size_t j) const { return this->ArrayVector<T>::isapprox(i,j);}
     LDVec<int> round() const {return LDVec<int>(this->lattice, this->ArrayVector<T>::round()); }
     LDVec<int> floor() const {return LDVec<int>(this->lattice, this->ArrayVector<T>::floor()); }
     LDVec<int> ceil() const {return LDVec<int>(this->lattice, this->ArrayVector<T>::ceil()); }
   protected:
     void check_arrayvector(const int);
   };
   
   
   template<typename T> class LQVec:  public LatVec, public ArrayVector<T>{
     Reciprocal lattice;
   public:
     LQVec(const Reciprocal& lat=Reciprocal(), const size_t n=0, const T *d=nullptr): ArrayVector<T>(3,n,d), lattice(lat){}
     template<class Integer, typename=typename std::enable_if<std::is_integral<Integer>::value>::type>
     LQVec(const Reciprocal& lat, const T*d,
           const std::vector<Integer>& shape,
           const std::vector<Integer>& strides,
           const int flag=1): ArrayVector<T>(d,shape,strides), lattice(lat){
       this->check_arrayvector(flag);
     }
     LQVec(const Reciprocal& lat, const ArrayVector<T>& vec, const int flag=1): ArrayVector<T>(vec), lattice(lat){  this->check_arrayvector(flag); }
     template<class R> LQVec(const LQVec<R>& vec): ArrayVector<T>(vec.numel(),vec.size(),vec.data()), lattice(vec.get_lattice()) {}
     template<class R> LQVec(const Reciprocal& lat, const std::vector<std::array<R,3>>& va): ArrayVector<T>(va), lattice(lat){}
     // required in gcc 9+ since we define our own operator= below:
     LQVec(const LQVec<T>& other): ArrayVector<T>(3u,other.size(),other.data()), lattice(other.get_lattice()) {}
     LQVec<T>& operator=(const LQVec<T>& other){
       if (this != &other){ // do nothing if called by, e.g., a = a;
         this->lattice = other.get_lattice();
         size_t m = other.numel();
         size_t n = other.size();
         // reuse the data-block if we can. otherwise, refresh/resize it
         if ( m !=this->numel() ) this->refresh(m,n);
         if ( n !=this->size()  ) this->resize(n);
         // copy-over the data (if it exists)
         if (m && n)
           for(size_t i=0; i<m*n; i++)
             this->_data[i] = other._data[i];
       }
       return *this;
     }
     const LQVec<T> operator[](const size_t i) const{
       bool isok = i < this->size();
       LQVec<T> out(this->lattice, isok ? 1u: 0u);
       if (isok) out = this->get(i);
       return out;
     }
   
     Reciprocal get_lattice() const { return lattice; }
     template<typename R> bool samelattice(const LQVec<R> *vec) const { return lattice.issame(vec->get_lattice()); }
     template<typename R> bool samelattice(const LDVec<R> *)    const { return false; }
     template<typename R> bool starlattice(const LQVec<R> *)    const { return false; }
     template<typename R> bool starlattice(const LDVec<R> *vec) const { return lattice.isstar(vec->get_lattice()); }
     template<typename R> bool samelattice(const LQVec<R> &vec) const { return lattice.issame(vec.get_lattice()); }
     template<typename R> bool samelattice(const LDVec<R> &)    const { return false; }
     template<typename R> bool starlattice(const LQVec<R> &)    const { return false; }
     template<typename R> bool starlattice(const LDVec<R> &vec) const { return lattice.isstar(vec.get_lattice()); }
     // extract overloads preserving lattice information
     LQVec<T> extract(const size_t i=0) const ;
     LQVec<T> first(const size_t num) const;
     LQVec<T> extract(const size_t n, const size_t *i) const;
     LQVec<T> extract(const ArrayVector<size_t>& idx) const;
     LQVec<T> extract(const ArrayVector<bool>& idx) const;
     LQVec<T> extract(const std::vector<bool>& idx) const;
     LQVec<T> get(const size_t i) const;
     ArrayVector<T> get_hkl() const;
     ArrayVector<double> get_xyz() const;
     LDVec<double> star() const;
   
     double dot(const size_t i, const size_t j) const;
     double norm(const size_t i) const { return sqrt(this->dot(i,i)); }
     LQVec<double> cross(const size_t i, const size_t j) const;
   
     LQVec<T>& operator+=(const LQVec<T>& av);
     LQVec<T>& operator-=(const LQVec<T>& av);
     LQVec<T>& operator+=(const T& av);
     LQVec<T>& operator-=(const T& av);
     LQVec<T>& operator*=(const T& av);
     LQVec<T>& operator/=(const T& av);
     // LQVec<T> operator -();
   
     template<class R> AVSizeInfo consistency_check(const LQVec<R>& b) const {
       if (!(this->samelattice(b))) throw std::runtime_error("arithmetic between Lattice vectors requires they have the same lattice");
       return this->ArrayVector<T>::consistency_check(b);
     }
     template<class R> AVSizeInfo consistency_check(const LDVec<R>& b) const {
       if (!(this->starlattice(b))) throw std::runtime_error("Reciprocal and real space vectors must be in dual lattices.");
       return this->ArrayVector<T>::consistency_check(b);
     }
     template<class R, template<class> class A,
       typename=typename std::enable_if<!std::is_base_of<LatVec,A<R>>::value && std::is_base_of<ArrayVector<R>,A<R>>::value >::type
       >
     AVSizeInfo consistency_check(const A<R>& b) const {
       return this->ArrayVector<T>::consistency_check(b); // b has no lattice, so nothing to check
     }
     template<typename R> bool isapprox(const LQVec<R>& that) const { return (this->samelattice(that) && this->ArrayVector<T>::isapprox(that)); }
     bool isapprox(const size_t i, const size_t j) const { return this->ArrayVector<T>::isapprox(i,j);}
     LQVec<int> round() const {return LQVec<int>(this->lattice, this->ArrayVector<T>::round()); }
     LQVec<int> floor() const {return LQVec<int>(this->lattice, this->ArrayVector<T>::floor()); }
     LQVec<int> ceil() const {return LQVec<int>(this->lattice, this->ArrayVector<T>::ceil()); }
   protected:
     void check_arrayvector(const int);
   };
   
   
   #ifndef DOXYGEN_SHOULD_SKIP_THIS
   // extend the lattice traits structs
   template<class T> struct LatticeTraits<LDVec<T>>{
     using type = Direct;
     using star = Reciprocal;
   };
   template<class T> struct LatticeTraits<LQVec<T>>{
     using type = Reciprocal;
     using star = Direct;
   };
   #endif
   
   template<class T, class R> struct LatVecTraits{
     using type = void; //< LDVec<R> or LQVec<R>
     using star = void; //< LQVec<R> or LDVec<R>
   };
   #ifndef DOXYGEN_SHOULD_SKIP_THIS
   template <class R, class S> struct LatVecTraits<LDVec<R>,S>{
     using type = LDVec<S>;
     using star = LQVec<S>;
   };
   template <class R, class S> struct LatVecTraits<LQVec<R>,S>{
     using type = LQVec<S>;
     using star = LDVec<S>;
   };
   template <class S> struct LatVecTraits<Direct,S>{
     using type = LDVec<S>;
     using star = LQVec<S>;
   };
   template <class S> struct LatVecTraits<Reciprocal,S>{
     using type = LQVec<S>;
     using star = LDVec<S>;
   };
   #endif
   
   
   #include "latvec.tpp"
   #include "ldvec.tpp"
   #include "lqvec.tpp"
   
   #endif
